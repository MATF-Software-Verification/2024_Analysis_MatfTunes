<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="1.90"/>
    <errors>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Song&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Song&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="../matftunes/MatfTunes/src/song.h" line="10" column="5"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Playlist&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Playlist&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="../matftunes/MatfTunes/src/playlist.h" line="12" column="5"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ImplicitPlaylist&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ImplicitPlaylist&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398">
            <location file="../matftunes/MatfTunes/src/implicitplaylist.h" line="10" column="5"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;fromVariant&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;fromVariant&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier.">
            <location file="../matftunes/MatfTunes/serialization/serializable.h" line="12" column="18" info="Virtual function in base class"/>
            <location file="../matftunes/MatfTunes/src/playlistlibrary.h" line="25" column="10" info="Function in derived class"/>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;setNaturalValue&apos; argument 1 names different: declaration &apos;value&apos; definition &apos;val&apos;." verbose="Function &apos;setNaturalValue&apos; argument 1 names different: declaration &apos;value&apos; definition &apos;val&apos;." cwe="628" inconclusive="true">
            <location file="../matftunes/MatfTunes/src/logslider.h" line="14" column="31"/>
            <location file="../matftunes/MatfTunes/src/logslider.cpp" line="26" column="40"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &apos;fromVariant&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier." verbose="The function &apos;fromVariant&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier.">
            <location file="../matftunes/MatfTunes/serialization/serializable.h" line="12" column="18" info="Virtual function in base class"/>
            <location file="../matftunes/MatfTunes/src/songlibrary.h" line="24" column="10" info="Function in derived class"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;m_name&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;m_name&apos; a value by passing the value to the constructor in the initialization list." cwe="398">
            <location file="../matftunes/MatfTunes/src/playlist.cpp" line="8" column="5"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;map&apos; shadows outer variable" verbose="Local variable &apos;map&apos; shadows outer variable" cwe="398">
            <location file="../matftunes/MatfTunes/src/playlist.cpp" line="95" column="17" info="Shadowed declaration"/>
            <location file="../matftunes/MatfTunes/src/playlist.cpp" line="102" column="21" info="Shadow variable"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;map&apos; shadows outer variable" verbose="Local variable &apos;map&apos; shadows outer variable" cwe="398">
            <location file="../matftunes/MatfTunes/src/playlist.cpp" line="113" column="17" info="Shadowed declaration"/>
            <location file="../matftunes/MatfTunes/src/playlist.cpp" line="120" column="21" info="Shadow variable"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;m_icon_path&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;m_icon_path&apos; a value by passing the value to the constructor in the initialization list." cwe="398">
            <location file="../matftunes/MatfTunes/src/playlistitemui.cpp" line="14" column="5"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;dir&apos; can be declared with const" verbose="Parameter &apos;dir&apos; can be declared with const" cwe="398">
            <location file="../matftunes/MatfTunes/src/settings.cpp" line="22" column="39"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Song::m_timesPlayed&apos; is not initialized in the constructor." verbose="Member variable &apos;Song::m_timesPlayed&apos; is not initialized in the constructor." cwe="398" inconclusive="true">
            <location file="../matftunes/MatfTunes/src/song.cpp" line="8" column="7"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Song::m_duration&apos; is not initialized in the constructor." verbose="Member variable &apos;Song::m_duration&apos; is not initialized in the constructor." cwe="398" inconclusive="true">
            <location file="../matftunes/MatfTunes/src/song.cpp" line="8" column="7"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &apos;Song::m_liked&apos; is not initialized in the constructor." verbose="Member variable &apos;Song::m_liked&apos; is not initialized in the constructor." cwe="398" inconclusive="true">
            <location file="../matftunes/MatfTunes/src/song.cpp" line="8" column="7"/>
        </error>
        <error id="funcArgNamesDifferent" severity="style" msg="Function &apos;setPathToImg&apos; argument 1 names different: declaration &apos;pathToImg&apos; definition &apos;new_path_to_img&apos;." verbose="Function &apos;setPathToImg&apos; argument 1 names different: declaration &apos;pathToImg&apos; definition &apos;new_path_to_img&apos;." cwe="628" inconclusive="true">
            <location file="../matftunes/MatfTunes/src/song.h" line="26" column="31"/>
            <location file="../matftunes/MatfTunes/src/song.cpp" line="59" column="33"/>
        </error>
        <error id="initializerList" severity="style" msg="Member variable &apos;SongItemUI::m_list_item&apos; is in the wrong place in the initializer list." verbose="Member variable &apos;SongItemUI::m_list_item&apos; is in the wrong place in the initializer list. Members are initialized in the order they are declared, not in the order they are in the initializer list.  Keeping the initializer list in the same order that the members were declared prevents order dependent initialization errors." cwe="398" inconclusive="true">
            <location file="../matftunes/MatfTunes/src/songitemui.cpp" line="13" column="7"/>
            <location file="../matftunes/MatfTunes/src/songitemui.h" line="37" column="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;current_song&apos; can be reduced." verbose="The scope of the variable &apos;current_song&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file="../matftunes/MatfTunes/src/songlibrarywindow.cpp" line="81" column="11"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;removeAllSongs&apos; is never used." verbose="The function &apos;removeAllSongs&apos; is never used." cwe="561">
            <location file="../matftunes/MatfTunes/src/songlibrary.cpp" line="98" column="0"/>
            <symbol>removeAllSongs</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;run&apos; is never used." verbose="The function &apos;run&apos; is never used." cwe="561">
            <location file="../matftunes/MatfTunes/src/lyricssearchthread.cpp" line="9" column="0"/>
            <symbol>run</symbol>
        </error>
    </errors>
</results>
